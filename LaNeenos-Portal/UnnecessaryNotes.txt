For the "LaNeenos-Portal\src\feature-module\peoples\students\add-student\index.tsx"



Visualizing the Flow: Of the Add Student Feature

User Action: Navigates to /student/add-student (frontend route from all_routes).
|
React Router renders <AddStudent />.
|
Form Submission: User fills out the form and clicks "Add Student."
|
<Link> triggers handleSubmit â†’ axios.post('http://localhost:6555/api/student/create', student).
|
Backend Response: Backend (createStudent) saves the student and responds with the new student data.
|
Frontend logs the response (console.log(res)) and navigates to /student/list.
|
Backend Setup: The /api/student/create endpoint is wired up in Express to the createStudent controller.



"Admission Number" is regNo: In the frontend, the "Admission Number" input field is directly mapped to the regNo property of the student state. When the form is submitted, the value entered in "Admission Number" becomes the regNo in the backend.
|
"Roll Number" is rollNo: The "Roll Number" input field is mapped to the rollNo property, and it remains separate from regNo.
|
Backend Behavior: The backend enforces uniqueness for regNo across all students and for rollNo within a class, confirming they are distinct identifiers.




Visualizing the flow of: Update Student Feature

1. User Navigates to Edit Page
   - Browser URL: http://localhost:3000/student/AD123
   - React Router: Matches /student/:regNo, renders <AddStudent />

2. Frontend: Component Mounts
   - useParams: Extracts regNo = "AD123"
   - useEffect: Runs once on mount
     - if (regNo): True, calls fetchStudentbyId()

3. Frontend: fetchStudentbyId
   - Constructs URL: http://localhost:6555/api/student/AD123
   - Sends GET request via axios
   - Console: Logs "AD123"

4. Backend: Request Received
   - Express Router: Matches /api/student/:regNo
   - getStudentById: Executes
     - req.params.regNo: "AD123"
     - Console: Logs "AD123"
     - MongoDB Query: Student.findOne({ regNo: "AD123" })
       - Finds: { regNo: "AD123", firstName: "John", ... }
     - Console: Logs "found by Id"
     - Response: 200 OK, JSON: { regNo: "AD123", firstName: "John", ... }

5. Frontend: Response Handled
   - axios.get: Returns response
   - student.data: { regNo: "AD123", firstName: "John", ... }
   - Console: Logs student.data
   - Processes joinedOn: Sets defaultDate if valid
   - setStudent(student.data): Updates state
   - Form Renders: Populates with fetched data

6. User Sees Data
   - Form fields display "AD123", "John", etc., ready for editing




FLOW OF CLASS MODULE
Explanation OF fetchData function()
1.Purpose: Fetches the list of all active classes from the backend and updates the fetclass state, which populates the table.
2.Backend Connection:
Endpoint: GET http://localhost:6555/api/class
Router: router.get("/", getAllClass)
Controller: getAllClass
3.Queries the database for classes with status: "active".
4.Populates the students field with student details (regNo, firstName, lastName).
5.Returns an array of class objects.
6.Data Transformation: Maps the response data to include a key field (set to _id) for use in the Table component.
7.Response Expected: Array of objects like:
json
         [
         {
            "_id": "someMongoId",
            "session": "2023-2024",
            "studentClassName": "Class 1",
            "status": "active",
            "students": [{ "regNo": "123", "firstName": "John", "lastName": "Doe" }],
            "createdAt": "...",
            "updatedAt": "..."
         }
         ]
Frontend Usage: Updates fetclass state, which is passed to the Table component as dataSource.
